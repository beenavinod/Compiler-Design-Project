%token IDENTIFIER STRING_LITERAL
%token INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN

%token CHAR INT VOID
%token IF WHILE 

%Start s

s 
	: main_dec
	| s main_dec
	;

main_dec						## int main(){ .. } 
	: INT MAIN '(' ')' compound_statement
	| VOID MAIN '(' ')' compound_statement
	| declaration
	| headers 	
	;

headers							## #include <myfile.h>
	: HASH INCLUDE HEADER_LITERAL 			## #include <IOSTREAM>
	| HASH INCLUDE '<' libraries '>'
	;

libraries
	: IOSTREAM
	| STDLIB
	| MATH
	| STRING
	| TIME
	;

compound_statement
	: '{' '}'
	| '{' statement_list '}'
	| '{' declaration_list '}'
	| '{' declaration_list statement_list '}'
	;

declaration_list
	: declaration
	| declaration_list declaration
	;

declaration
	: type_specifier init_declarator_list ';'        #int a,b,c,d=10;
	;

init_declarator_list						
	: init_declarator
	| init_declarator_list ',' init_declarator    ## a=10 , b=20, ....


init_declarator
	: IDENTIFIER '=' assignment_expression	     
	| IDENTIFIER


statement_list
	: statement
	| statement_list statement


statement
	: compound_statement
	| expression_statement
	| iteration_statement
	| selection_statement
	;

type_specifier
	: VOID 		
	| CHAR 		
	| INT 		 	
	;
	;

assignment_expression
	: equality_expression
	| unary_expression assignment_operator assignment_expression
	;

assignment_operator
	: '='
	| ADD_ASSIGN           ## +=
	| SUB_ASSIGN	       ## -=
	;

expression_statement
	: ';'
	| expression ';'
	;

expression
	: assignment_expression
	| expression ',' assignment_expression
	;

iteration_statement
	: WHILE '(' expression ')' statement
	;
selection_statement
	: IF '(' expression ')' statement


equality_expression
	: relational_expression
	| equality_expression EQ_OP relational_expression
	| equality_expression NE_OP relational_expression
	;

multiplicative_expression				         ##  E-> T|E+T
	: unary_expression      				 ##  T-> F|T*F			
	| multiplicative_expression '*' unary_expression	 ##  F-> num
	| multiplicative_expression '/' unary_expression
	;

additive_expression
	: multiplicative_expression
	| additive_expression '+' multiplicative_expression
	| additive_expression '-' multiplicative_expression
	;

relational_expression
	: additive_expression
	| relational_expression '<' additive_expression
	| relational_expression '>' additive_expression
	| relational_expression LE_OP additive_expression
	| relational_expression GE_OP additive_expression
	;

unary_expression
	: postfix_expression
	| unary_operator unary_expression    ## !a ++a --a etc
	;

postfix_expression
	: primary_expression			##a++ b-- etc
	| postfix_expression '(' ')'
	| postfix_expression '.' IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP
	;

primary_expression
	: IDENTIFIER
	| INTEGER_LITERAL
	| STRING_LITERAL
	| FLOAT_LITERAL	
	| CHARACTER_LITERAL	
	| '(' expression ')'
	;

unary_operator
	: '+'
	| '-'
	| '&'
	| '|'
	| '!'
	;

